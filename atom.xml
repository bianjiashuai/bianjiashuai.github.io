<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>边佳帅</title>
  
  <subtitle>边佳帅的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-15T07:04:59.802Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BianJiashuai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java8笔记</title>
    <link href="http://yoursite.com/2019/11/15/java8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/11/15/java8笔记/</id>
    <published>2019-11-15T07:04:22.000Z</published>
    <updated>2019-11-15T07:04:59.802Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、Collectors-类的静态工厂方法"><a href="#1、Collectors-类的静态工厂方法" class="headerlink" title="1、Collectors 类的静态工厂方法"></a>1、Collectors 类的静态工厂方法</h3><ul><li><p><strong>toList：把流中所有项目收集到一个 List</strong><br>返回类型为：<code>List&lt;T&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Dish&gt; dishes = menuStream.collect(toList());</span><br></pre></td></tr></table></figure></li><li><p><strong>toSet：把流中所有项目收集到一个 Set ，删除重复项</strong><br>返回类型为：<code>Set&lt;T&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Dish&gt; dishes = menuStream.collect(toSet());</span><br></pre></td></tr></table></figure></li><li><p><strong>toCollection：把流中所有项目收集到给定的供应源创建的集合</strong><br>返回类型为：<code>Collection&lt;T&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;Dish&gt; dishes = menuStream.collect(toCollection(), ArrayList::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>counting：计算流中元素的个数</strong><br>返回类型为：<code>Long</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> howManyDishes = menuStream.collect(counting());</span><br></pre></td></tr></table></figure></li><li><p><strong>summingInt：对流中项目的一个整数属性求和</strong><br>返回类型为：<code>Integer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> totalCalories = menuStream.collect(summingInt(Dish::getCalories));</span><br></pre></td></tr></table></figure></li><li><p><strong>averagingInt：计算流中项目 Integer 属性的平均值</strong><br>返回类型为：<code>Double</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> avgCalories = menuStream.collect(averagingInt(Dish::getCalories));</span><br></pre></td></tr></table></figure></li><li><p><strong>summarizingInt：收集关于流中项目 Integer 属性的统计值，例如最大、最小、总和与平均值</strong><br>返回类型为：<code>IntSummaryStatistics</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IntSummaryStatistics menuStatistics =  </span><br><span class="line">menuStream.collect(summarizingInt(Dish::getCalories));</span><br></pre></td></tr></table></figure></li><li><p><strong>joining：连接对流中每个项目调用 toString 方法所生成的字符串</strong><br>返回类型为：<code>String</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String shortMenu = menuStream.map(Dish::getName).collect(joining(<span class="string">", "</span>));</span><br></pre></td></tr></table></figure></li><li><p><strong>maxBy：一个包裹了流中按照给定比较器选出的最大元素的 Optional，或如果流为空则为Optional.empty()</strong><br>返回类型为：<code>Optional&lt;T&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Dish&gt; fattest = </span><br><span class="line">menuStream.collect(maxBy(comparingInt(Dish::getCalories)));</span><br></pre></td></tr></table></figure></li><li><p><strong>minBy：一个包裹了流中按照给定比较器选出的最小元素的 Optional，或如果流为空则为Optional.empty()</strong><br>返回类型为：<code>Optional&lt;T&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Dish&gt; lightest= </span><br><span class="line">menuStream.collect(minBy(comparingInt(Dish::getCalories)));</span><br></pre></td></tr></table></figure></li><li><p><strong>reducing：从一个作为累加器的初始值开始，利用 BinaryOperator 与流中的元素逐个结合，从而将流归约为单个值</strong><br>返回类型为：<code>归约操作产生的类型</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> totalCalories = menuStream.collect(reducing(<span class="number">0</span>, Dish::getCalories, </span><br><span class="line">Integer::sum));</span><br></pre></td></tr></table></figure></li><li><p><strong>collectingAndThen：包裹另一个收集器，对其结果应用转换函数</strong><br>返回类型为：<code>转换函数返回的类型</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> howManyDishes = menuStream.collect(collectingAndThen(toList(), List::size));</span><br></pre></td></tr></table></figure></li><li><p><strong>groupingBy：根据项目的一个属性的值对流中的项目作问组，并将属性值作为结果 Map 的键</strong><br>返回类型为：<code>Map&lt;K, List&lt;T&gt;&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Dish.Type, List&lt;Dish&gt;&gt; dishesByType = </span><br><span class="line">menuStream.collect(groupingBy(Dish::getType));</span><br></pre></td></tr></table></figure></li><li><p><strong>partitioningBy：根据对流中每个项目应用谓词的结果来对项目进行分区</strong></p><p>返回类型为：<code>Map&lt;Boolean, List&lt;T&gt;&gt;&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Boolean, List&lt;Dish&gt;&gt; vegetarianDishes = </span><br><span class="line">menuStream.collect(partitioningBy(Dish::isVegetarian);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、Java-8中的常用函数式接口"><a href="#2、Java-8中的常用函数式接口" class="headerlink" title="2、Java 8中的常用函数式接口"></a>2、Java 8中的常用函数式接口</h3><table><thead><tr><th><strong>函数式接口</strong></th><th><strong>函数描述符</strong></th><th><strong>原始类型特化</strong></th></tr></thead><tbody><tr><td><strong>Predicate<t></t></strong></td><td><strong>T-&gt;boolean</strong></td><td><strong>IntPredicate</strong> <br><strong>LongPredicate</strong> <br><strong>DoublePredicate</strong></td></tr><tr><td><strong>Consumer<t></t></strong></td><td><strong>T-&gt;void</strong></td><td><strong>IntConsumer</strong> <br><strong>LongConsumer</strong> <br><strong>DoubleConsumer</strong></td></tr><tr><td><strong>Function&lt;T, R&gt;</strong></td><td><strong>T-&gt;R</strong></td><td><strong>IntFunction<r></r></strong> <br><strong>IntToDoubleFunction</strong> <br><strong>IntToLongFunction</strong> <br><br><strong>LongFunction<r></r></strong> <br><strong>LongToDoubleFunction</strong> <br><strong>LongToIntFunction</strong> <br><br><strong>DoubleFunction<r></r></strong> <br><br><strong>ToIntFunction<t></t></strong>, <br><strong>ToDoubleFunction<t></t></strong>, <br><strong>ToLongFunction<t></t></strong></td></tr><tr><td><strong>Supplier<t></t></strong></td><td><strong>()-&gt;T</strong></td><td><strong>BooleanSupplier</strong><br><strong>IntSupplier</strong><br><strong>LongSupplier</strong><br><strong>DoubleSupplier</strong></td></tr><tr><td><strong>UnaryOperator<t></t></strong></td><td><strong>T-&gt;T</strong></td><td><strong>IntUnaryOperator</strong><br><strong>LongUnaryOperator</strong><br><strong>DoubleUnaryOperator</strong></td></tr><tr><td><strong>BinaryOperator<t></t></strong></td><td><strong>(T, T)-&gt;T</strong></td><td><strong>IntBinaryOperator</strong><br><strong>DoubleBinaryOperator</strong><br><strong>LongBinaryOperator</strong></td></tr><tr><td><strong>BiPredicate&lt;L, R&gt;</strong></td><td><strong>(L, R)-&gt;boolean</strong></td><td></td></tr><tr><td><strong>BiConsumer&lt;T, U&gt;</strong></td><td><strong>(T, U)-&gt;void</strong></td><td><strong>ObjIntConsumer<t></t></strong><br><strong>ObjDoubleConsumer<t></t></strong><br><strong>ObjLongConsumer<t></t></strong></td></tr><tr><td><strong>BiFunction&lt;T, U, R&gt;</strong></td><td><strong>(T, U)-&gt;R</strong></td><td><strong>ToIntBiFunction&lt;T, U&gt;</strong><br><strong>ToLongBiFunction&lt;T, U&gt;</strong><br><strong>ToDoubleBiFunction&lt;T, U&gt;</strong></td></tr></tbody></table><h3 id="3、Optional-类的方法"><a href="#3、Optional-类的方法" class="headerlink" title="3、Optional 类的方法"></a>3、Optional 类的方法</h3><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>empty</strong></td><td>返回一个空的 Optional 实例</td></tr><tr><td><strong>filter</strong></td><td>如果值存在并且满足提供的谓词，就返回包含该值的 Optional 对象；否则返回一个空的Optional 对象</td></tr><tr><td><strong>flatMap</strong></td><td>如果值存在，就对该值执行提供的 mapping 函数调用，返回一个 Optional 类型的值，否则就返回一个空的 Optional 对象</td></tr><tr><td><strong>get</strong></td><td>如果该值存在，将该值用 Optional 封装返回，否则抛出一个 NoSuchElementException 异常</td></tr><tr><td><strong>ifPresent</strong></td><td>如果值存在，就执行使用该值的方法调用，否则什么也不做</td></tr><tr><td><strong>isPresent</strong></td><td>如果值存在就返回 true ，否则返回 false</td></tr><tr><td><strong>map</strong></td><td>如果值存在，就对该值执行提供的 mapping函数调用</td></tr><tr><td><strong>of</strong></td><td>将指定值用 Optional 封装之后返回，如果该值为 null ，则抛出一个 NullPointerException异常</td></tr><tr><td><strong>ofNullable</strong></td><td>将指定值用 Optional 封装之后返回，如果该值为 null ，则返回一个空的 Optional 对象</td></tr><tr><td><strong>orElse</strong></td><td>如果有值则将其返回，否则返回一个默认值</td></tr><tr><td><strong>orElseGet</strong></td><td>如果有值则将其返回，否则返回一个由指定的 Supplier 接口生成的值</td></tr><tr><td><strong>orElseThrow</strong></td><td>如果有值则将其返回，否则抛出一个由指定的 Supplier 接口生成的异常</td></tr></tbody></table><h3 id="4、Spliterator-的特性"><a href="#4、Spliterator-的特性" class="headerlink" title="4、Spliterator 的特性"></a>4、Spliterator 的特性</h3><table><thead><tr><th><strong>特性</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td><strong>ORDERED</strong></td><td>元素有既定的顺序（例如 List ），因此 Spliterator 在遍历和划分时也会遵循这一顺序</td></tr><tr><td><strong>DISTINCT</strong></td><td>对于任意一对遍历过的元素 x 和 y ， x.equals(y) 返回 false</td></tr><tr><td><strong>SORTED</strong></td><td>遍历的元素按照一个预定义的顺序排序</td></tr><tr><td><strong>SIZED</strong></td><td>该 Spliterator 由一个已知大小的源建立（例如 Set ），因此 estimatedSize() 返回的是准确值</td></tr><tr><td><strong>NONNULL</strong></td><td>保证遍历的元素不会为 null</td></tr><tr><td><strong>IMMUTABLE</strong></td><td>Spliterator 的数据源不能修改。这意味着在遍历时不能添加、删除或修改任何元素</td></tr><tr><td><strong>CONCURRENT</strong></td><td>该 Spliterator 的数据源可以被其他线程同时修改而无需同步</td></tr><tr><td><strong>SUBSIZED</strong></td><td>该 Spliterator 和所有从它拆分出来的 Spliterator 都是 SIZED</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、Collectors-类的静态工厂方法&quot;&gt;&lt;a href=&quot;#1、Collectors-类的静态工厂方法&quot; class=&quot;headerlink&quot; title=&quot;1、Collectors 类的静态工厂方法&quot;&gt;&lt;/a&gt;1、Collectors 类的静态工厂方法&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>垃圾收集相关常用参数</title>
    <link href="http://yoursite.com/2019/11/15/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%9B%B8%E5%85%B3%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2019/11/15/垃圾收集相关常用参数/</id>
    <published>2019-11-15T06:50:52.000Z</published>
    <updated>2019-11-15T06:59:37.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="垃圾收集相关的常用参数"><a href="#垃圾收集相关的常用参数" class="headerlink" title="垃圾收集相关的常用参数"></a>垃圾收集相关的常用参数</h2><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>UseSerialGC</td><td>虚拟机运行在Client模式下的默认值，打开此开关后，使用Serial + Serial Old的收集器组合进行内存回收</td></tr><tr><td>UseParNewGC</td><td>打开此开关后，使用ParNew + Serial Old的收集器组合进行内存回收</td></tr><tr><td>UseConcMarkSweepGC</td><td>打开此开关后，使用ParNew + CMS + Serial Old的收集器组合进行内存回收。Serial Old收集器将作为CMS收集器出现Concurrent Mode Failure失败后的后备收集器使用</td></tr><tr><td>UseParallelGC</td><td>虚拟机运行在Server模式下的默认值，打开此开关后，使用Parallel Scavenge + Serial Old（PS MarkSweep）的收集器组合进行内存回收</td></tr><tr><td>UseParallelOldGC</td><td>打开此开关后，使用Parallel Scavenge + Parallel Old 的收集器组合进行内存回收</td></tr><tr><td>SurvivorRatio</td><td>新生代中Eden区域与Survivor区域的容量比值，默认为8，代表Eden : Survivor=8:1</td></tr><tr><td>PretenureSizeThreshold</td><td>直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代分配</td></tr><tr><td>MaxTenuringThreshold</td><td>晋升到老年代的对象年龄。每个对象在坚持过一次Minor GC之后，年龄就增加1，当超过这个参数值时就进入老年代</td></tr><tr><td>UseAdaptiveSizePolicy</td><td>动态调整Java堆中各个区域的大小以及进入老年代的年龄</td></tr><tr><td>HandlePromotionFailure</td><td>是否允许分配担保失败，即老年代的剩余空间不足以应付新生代的整个Eden和Survivor区的所有对象都存活的极端情况</td></tr><tr><td>ParallelGCThreads</td><td>设置并行GC时进行内存回收的线程数</td></tr><tr><td>GCTimeRatio</td><td>GC时间占总时间的比率，默认值为99，即允许1%的GC时间。仅使用Parallel Scavenge收集器时生效</td></tr><tr><td>MaxGCPauseMillis</td><td>设置GC的最大停顿时间。仅在使用Parallel Scavenge收集器生效</td></tr><tr><td>CMSInitiatingOccupancyFraction</td><td>设置CMS收集器在老年代空间被使用多少后触发垃圾收集，默认值为68%，仅使用CMS收集器时生效</td></tr><tr><td>UseCMSCompactAtFullCollection</td><td>设置CMS收集器在完成垃圾收集后是否要进行一次内存碎片整理。仅在使用CMS收集器时生效</td></tr><tr><td>CMSFullGCsBeforeCompaction</td><td>设置CMS收集器在进行若干次垃圾收集后再启动一次内存碎片整理。仅在使用CMS收集器时生效</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;垃圾收集相关的常用参数&quot;&gt;&lt;a href=&quot;#垃圾收集相关的常用参数&quot; class=&quot;headerlink&quot; title=&quot;垃圾收集相关的常用参数&quot;&gt;&lt;/a&gt;垃圾收集相关的常用参数&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;参数&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Node常用工具</title>
    <link href="http://yoursite.com/2019/11/15/Node%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/11/15/Node常用操作/</id>
    <published>2019-11-15T06:13:25.000Z</published>
    <updated>2019-11-15T06:39:49.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node版本管理工具-nvm"><a href="#Node版本管理工具-nvm" class="headerlink" title="Node版本管理工具 nvm"></a>Node版本管理工具 nvm</h2><h3 id="1、安装nvm"><a href="#1、安装nvm" class="headerlink" title="1、安装nvm"></a>1、安装nvm</h3><ul><li>如果已经单独安装了node，建议卸载。</li><li>直接进入安装包下载地址：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fcoreybutler%2Fnvm-windows%2Freleases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a>，选择nvm-setup.zip，下载后直接安装。 </li><li>使用命令<code>nvm -v</code>检查是否安装成功</li></ul><h3 id="2、安装Node"><a href="#2、安装Node" class="headerlink" title="2、安装Node"></a>2、安装Node</h3><p>使用<code>nvm install &lt;version&gt; [&lt;arch&gt;]</code>命令下载需要的版本。arch参数表示系统位数，默认是64位，如果是32位操作系统，需要执行命令：nvm install 8.11.2 32</p><h3 id="3、Node版本管理"><a href="#3、Node版本管理" class="headerlink" title="3、Node版本管理"></a>3、Node版本管理</h3><ul><li><p><code>nvm nvm list</code> 是查找本电脑上所有的node版本</p><ul><li><code>nvm list</code> 查看已经安装的版本</li><li><code>nvm list installed</code> 查看已经安装的版本</li><li><code>nvm list available</code> 查看网络可以安装的版本</li></ul></li><li><p><code>nvm install</code> 安装最新版本nvm</p></li><li><p><code>nvm use &lt;version&gt;</code> 切换使用指定的版本node</p></li><li><p><code>nvm ls</code> 列出所有版本</p></li><li><p><code>nvm current</code> 显示当前版本</p></li><li><p><code>nvm alias &lt;name&gt; &lt;version&gt;</code>  给不同的版本号添加别名</p></li><li><p><code>nvm unalias &lt;name&gt;</code> 删除已定义的别名</p></li><li><p><code>nvm reinstall-packages &lt;version&gt;</code> 在当前版本node环境下，重新全局安装指定版本号的npm包</p></li><li><p><code>nvm on</code> 打开nodejs控制</p></li><li><p><code>nvm off</code> 关闭nodejs控制</p></li><li><p><code>nvm proxy</code> 查看设置与代理</p></li><li><p><code>nvm *_mirror [url]</code> 设置</p><ul><li><p><code>nvm node_mirror [url]</code> 设置或者查看setting.txt中的node_mirror，</p><p>如果不设置的默认是 <a href="https://nodejs.org/dist/" target="_blank" rel="noopener">https://nodejs.org/dist/</a></p></li><li><p><code>nvm npm_mirror [url]</code> 设置或者查看setting.txt中的npm_mirror，</p><p>如果不设置的话默认的是： <a href="https://github.com/npm/npm/archive/" target="_blank" rel="noopener">https://github.com/npm/npm/archive/</a>.</p></li></ul></li><li><p><code>nvm uninstall &lt;version&gt;</code> 卸载指定的版本</p></li><li><p><code>nvm use [version] [arch]</code> 切换指定的node版本和位数</p></li><li><p><code>nvm root [path]</code> 设置和查看root路径</p></li><li><p><code>nvm version</code> 查看当前的版本</p></li></ul><h2 id="Node镜像管理工具"><a href="#Node镜像管理工具" class="headerlink" title="Node镜像管理工具"></a>Node镜像管理工具</h2><h3 id="1、安装nrm"><a href="#1、安装nrm" class="headerlink" title="1、安装nrm"></a>1、安装nrm</h3><p>使用命令<code>npm install -g nrm</code>安装nrm</p><h3 id="2、Node镜像管理"><a href="#2、Node镜像管理" class="headerlink" title="2、Node镜像管理"></a>2、Node镜像管理</h3><ul><li><p><code>nrm ls</code>  列出所有镜像，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  npm -------- https://registry.npmjs.org/</span><br><span class="line">  yarn ------- https://registry.yarnpkg.com/</span><br><span class="line">  cnpm ------- http://r.cnpmjs.org/</span><br><span class="line">* taobao ----- https://registry.npm.taobao.org/</span><br><span class="line">  nj --------- https://registry.nodejitsu.com/</span><br><span class="line">  npmMirror -- https://skimdb.npmjs.com/registry/</span><br><span class="line">  edunpm ----- http://registry.enpmjs.org/</span><br></pre></td></tr></table></figure></li><li><p><code>nrm use &lt;name&gt;</code> name 表示镜像名称，如：nrm use taobao</p></li><li><p><code>nrm add name url</code>添加自定义的npm源，name 为自定义源名称 ，url为npm源链接</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Node版本管理工具-nvm&quot;&gt;&lt;a href=&quot;#Node版本管理工具-nvm&quot; class=&quot;headerlink&quot; title=&quot;Node版本管理工具 nvm&quot;&gt;&lt;/a&gt;Node版本管理工具 nvm&lt;/h2&gt;&lt;h3 id=&quot;1、安装nvm&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第一个程序</title>
    <link href="http://yoursite.com/2019/11/13/hello-world/"/>
    <id>http://yoursite.com/2019/11/13/hello-world/</id>
    <published>2019-11-13T03:56:40.307Z</published>
    <updated>2019-11-13T03:56:40.307Z</updated>
    
    <content type="html"><![CDATA[<p>恭喜你，进入第一个程序。</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;恭喜你，进入第一个程序。&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-
      
    
    </summary>
    
    
  </entry>
  
</feed>
